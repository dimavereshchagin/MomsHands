package com.moms.hands.domain.usecase

import com.moms.hands.data.dao.FeedingDao
import com.moms.hands.data.dao.SpitUpDao
import com.moms.hands.data.entity.Feeding
import com.moms.hands.data.entity.SpitUp
import java.time.LocalDate

/**
 * Use Case: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞.
 *
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã: "–í—ã —á–∞—â–µ –∫–æ—Ä–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –≥—Ä—É–¥—å—é –ø–æ –≤–µ—á–µ—Ä–∞–º"
 * - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –ª–µ–≤–æ–π –≥—Ä—É–¥—å—é"
 * - –ê–Ω–∞–ª–∏–∑ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥—Ä—É–¥–∏
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–µ—Ç–µ–π (–∫–ª—é—á–µ–≤–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¢–ó)
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞.
 */
class GenerateInsightsForChildUseCase(
    private val feedingDao: FeedingDao,
    private val spitUpDao: SpitUpDao
) {

    suspend fun execute(childId: String, date: LocalDate): List<String> {
        val feedings = feedingDao.getByDate(childId, date)
        val spitUps = spitUpDao.getByDate(childId, date)

        val insights = mutableListOf<String>()

        // 1. –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–¥–µ–π
        val leftSec = feedings.filter { it.breast == "LEFT" }.sumOf { it.durationSeconds }
        val rightSec = feedings.filter { it.breast == "RIGHT" }.sumOf { it.durationSeconds }

        if (rightSec > leftSec * 1.5) {
            insights += "–í—ã —á–∞—â–µ –∫–æ—Ä–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –≥—Ä—É–¥—å—é –ø–æ –≤–µ—á–µ—Ä–∞–º"
        } else if (leftSec > rightSec * 1.5) {
            insights += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –ª–µ–≤–æ–π –≥—Ä—É–¥—å—é"
        }

        // 2. –ê–Ω–∞–ª–∏–∑ —Å—Ä—ã–≥–∏–≤–∞–Ω–∏–π
        val morningSpits = spitUps.count { it.timestamp.hour in 6..11 }
        if (morningSpits > spitUps.size * 0.7) {
            insights += "–°—Ä—ã–≥–∏–≤–∞–Ω–∏—è —á–∞—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø–æ—Å–ª–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π"
        }

        // 3. –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∫–æ—Ä–º–ª–µ–Ω–∏—è–º–∏
        val sortedFeedings = feedings.sortedBy { it.startTime }
        if (sortedFeedings.size > 1) {
            val intervals = sortedFeedings.zipWithNext { a, b ->
                kotlin.time.Duration.between(a.endTime, b.startTime).inWholeMinutes
            }
            val avgInterval = intervals.average()
            val lastAvg = getLastWeekAverageInterval(childId)
            if (lastAvg != null && avgInterval < lastAvg - 15) {
                insights += "–°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–æ—Ä–º–ª–µ–Ω–∏—è–º–∏ —Å–æ–∫—Ä–∞—Ç–∏–ª—Å—è –Ω–∞ ${lastAvg - avgInterval.toInt()} –º–∏–Ω—É—Ç"
            }
        }

        return insights.ifEmpty { listOf("–í—Å–µ –≤ –Ω–æ—Ä–º–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üíñ") }
    }

    private suspend fun getLastWeekAverageInterval(childId: String): Double? {
        val lastWeek = LocalDate.now().minusDays(7)
        val feedings = feedingDao.getSince(childId, lastWeek)
        val sorted = feedings.sortedBy { it.startTime }
        if (sorted.size <= 1) return null
        val intervals = sorted.zipWithNext { a, b ->
            kotlin.time.Duration.between(a.endTime, b.startTime).inWholeMinutes
        }
        return intervals.average()
    }
}