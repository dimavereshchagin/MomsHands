package com.moms.hands.domain.usecase

import android.content.Context
import com.moms.hands.data.dao.FeedingDao
import com.moms.hands.data.dao.SpitUpDao
import com.moms.hands.data.entity.Feeding
import com.moms.hands.data.entity.SpitUp
import java.time.LocalDate
import java.time.LocalDateTime

/**
 * Use Case: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è Mom's Hands.
 *
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–Ω—Å–∞–π—Ç–æ–≤ ("–í—ã —á–∞—â–µ –∫–æ—Ä–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –≥—Ä—É–¥—å—é –ø–æ –≤–µ—á–µ—Ä–∞–º")
 * - –†–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å—É—Ç–æ—á–Ω—ã–µ/–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã)
 * - –ü–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
 * - –¢–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 *
 * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢–ó: 1.1, 1.2, 1.3, 2.4
 */
class AnalyticsUseCase(
    private val context: Context,
    private val feedingDao: FeedingDao,
    private val spitUpDao: SpitUpDao
) {

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã.
     */
    suspend fun generateInsights(): List<String> {
        val today = LocalDate.now()
        val feedings = feedingDao.getByDate("child_1", today)
        val spitUps = spitUpDao.getByDate("child_1", today)

        val insights = mutableListOf<String>()

        val leftSec = feedings.filter { it.breast == "LEFT" }.sumOf { it.durationSeconds }
        val rightSec = feedings.filter { it.breast == "RIGHT" }.sumOf { it.durationSeconds }

        if (rightSec > leftSec * 1.5) {
            insights += "–í—ã —á–∞—â–µ –∫–æ—Ä–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –≥—Ä—É–¥—å—é –ø–æ –≤–µ—á–µ—Ä–∞–º"
        } else if (leftSec > rightSec * 1.5) {
            insights += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –ª–µ–≤–æ–π –≥—Ä—É–¥—å—é"
        }

        val morningSpits = spitUps.count { it.timestamp.hour in 6..11 }
        if (morningSpits > spitUps.size * 0.7) {
            insights += "–°—Ä—ã–≥–∏–≤–∞–Ω–∏—è —á–∞—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø–æ—Å–ª–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π"
        }

        val sortedFeedings = feedings.sortedBy { it.startTime }
        if (sortedFeedings.size > 1) {
            val intervals = sortedFeedings.zipWithNext { a, b ->
                kotlin.time.Duration.between(a.endTime, b.startTime).inWholeMinutes
            }
            val avgInterval = intervals.average()
            val lastAvg = getLastWeekAverageInterval()
            if (lastAvg != null && avgInterval < lastAvg - 15) {
                insights += "–°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–æ—Ä–º–ª–µ–Ω–∏—è–º–∏ —Å–æ–∫—Ä–∞—Ç–∏–ª—Å—è –Ω–∞ ${lastAvg - avgInterval.toInt()} –º–∏–Ω—É—Ç"
            }
        }

        return insights.ifEmpty { listOf("–í—Å–µ –≤ –Ω–æ—Ä–º–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üíñ") }
    }

    private suspend fun getLastWeekAverageInterval(): Double? {
        val lastWeek = LocalDate.now().minusDays(7)
        val feedings = feedingDao.getSince("child_1", lastWeek)
        val sorted = feedings.sortedBy { it.startTime }
        if (sorted.size <= 1) return null
        val intervals = sorted.zipWithNext { a, b ->
            kotlin.time.Duration.between(a.endTime, b.startTime).inWholeMinutes
        }
        return intervals.average()
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã.
     */
    suspend fun getHeatmapData(days: Int = 7): List<List<Float>> {
        val data = mutableListOf<List<Float>>()
        val now = LocalDateTime.now()

        repeat(days) { dayOffset ->
            val day = now.minusDays(dayOffset.toLong())
            val dayData = MutableList(24) { 0f }
            val feedings = feedingDao.getByDate("child_1", day.toLocalDate())
            feedings.forEach { feeding ->
                val hour = feeding.startTime.hour
                dayData[hour] += feeding.durationSeconds / 60f
            }
            data.add(0, dayData)
        }

        return data
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π (–ª–µ–≤–∞—è/–ø—Ä–∞–≤–∞—è).
     */
    suspend fun getBreastRatio(): Map<String, Float> {
        val feedings = feedingDao.getAll("child_1")
        val left = feedings.filter { it.breast == "LEFT" }.sumOf { it.durationSeconds }
        val right = feedings.filter { it.breast == "RIGHT" }.sumOf { it.durationSeconds }
        val total = (left + right).toFloat()
        return mapOf(
            "LEFT" to if (total > 0) left / total else 0.5f,
            "RIGHT" to if (total > 0) right / total else 0.5f
        )
    }
}